apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "kotlin-noarg"
apply from: rootProject.file("config.gradle")

def TEST_VERSION_CODE = 5
def TEST_VERSION_NAME = '1.0.5'

def RTM_VERSION_CODE = 5
def RTM_VERSION_NAME = '1.0.5'

android {
    compileSdkVersion androidEnv.compileSdkVersion
    buildToolsVersion androidEnv.buildToolsVersion

    project.archivesBaseName = "WanAndroid-AAC"

    defaultConfig {
        applicationId "com.example.practice"
        minSdkVersion androidEnv.minSdkVersion
        targetSdkVersion androidEnv.targetSdkVersion
        versionCode TEST_VERSION_CODE
        versionName TEST_VERSION_NAME

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        //必须，告知RxHttp你依赖的okhttp版本，目前已适配 v3.12.0 - v4.8.1版本  (v4.3.0除外)
                        rxhttp_okhttp          : '4.8.1',
                        //使用asXxx方法时必须，告知RxHttp你依赖的rxjava版本，可传入rxjava2、rxjava3
                        rxhttp_rxjava          : 'rxjava3',
                        rxhttp_package         : 'rxhttp',  //非必须，指定RxHttp类包名
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"
                ]
            }
        }

        flavorDimensions "rtm"
    }

    signingConfigs {
        system {
            storeFile file('..\\system_signature.keystore')
            storePassword '123456'
            keyAlias 'systemkey'
            keyPassword '123456'
        }
    }

    productFlavors {
        preview {
            // 动态修改 常量 字段
            buildConfigField "String", "ENVIRONMENT", '"preview"'//测试环境
            versionCode TEST_VERSION_CODE
            versionName TEST_VERSION_NAME

        }
        rtm {
            buildConfigField "String", "ENVIRONMENT", '"rtm"'//正式环境
            versionCode RTM_VERSION_CODE
            versionName RTM_VERSION_NAME
        }
        applicationVariants.all {
            variant ->
                variant.outputs.all {
                    outputFileName = "${project.archivesBaseName}_v${versionName}_${variant.productFlavors.name[0]}.apk"
                }
        }
    }

    viewBinding {
        enabled = true
    }
    androidExtensions {
        experimental = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.system
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.system
        }
    }

    //必须，java 8或更高
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


}

//空构造方法
noArg {
    annotation("com.example.practice.config.NoArg")
}

repositories {
    maven { url "https://jitpack.io" }

    google()
    jcenter()
    flatDir {
        dirs 'libs'
    }
}


dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation mDependencies.appcompat
    implementation mDependencies.constraintlayout
    implementation project(path: ':mvvmlibrary')
    implementation mDependencies.recyclerview
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    //以下3个为必须，
    implementation mDependencies.rxhttp
    implementation mDependencies.okhttp //rxhttp v2.2.2版本起，需要手动依赖okhttp
    annotationProcessor mDependencies.compiler
    //生成RxHttp类，非kotlin项目，请使用annotationProcessor代替kapt

    implementation mDependencies.coroutine//管理协程生命周期，页面销毁，关闭请求

    //rxjava3
    implementation mDependencies.rxjava
    implementation mDependencies.rxandroid
    implementation mDependencies.rxlifejava//管理RxJava3生命周期，页面销毁，关闭请求


    //非必须，根据自己需求选择 RxHttp默认内置了GsonConverter
    implementation mDependencies.fastjson
    //使用argus反射创建无参构造，使用parcelble解析需要无参
    implementation mDependencies.ktreflect
    //动态申请库
    implementation mDependencies.easypermissions
    /*//id注解库废弃
    implementation 'com.jakewharton:butterknife:10.2.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.1'*/
    //解决65535问题
    implementation mDependencies.multidex
    //v4适应包
    implementation mDependencies.supportv4
    //adapter适配器
    implementation mDependencies.baseRecyclerView
    //图片加载工具
    implementation mDependencies.glide

    implementation mDependencies.refreshkernel//核心必须依赖
    implementation mDependencies.refreshclass//经典刷新头
    implementation mDependencies.refreshbal//球脉冲加载
    //Room数据库
    def room_version = "2.2.5"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    //空视图布局
    implementation mDependencies.loadlayout
    //轮播图
    implementation mDependencies.banner
    //tablayout与cardview
    implementation mDependencies.design
    //搜索/复选样式
    implementation mDependencies.flowlayout
    //图片缩放
    implementation mDependencies.photoview
    //头条适配
    implementation mDependencies.autosize
    //导航栏https://github.com/H07000223/FlycoTabLayout
    implementation mDependencies.flytablelayout
}